// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RandomWinnerGame is VRFConsumerBase, Ownable {
    //Chainlink variables
    // The amount of LINK to send with the request
    uint256 public fee;

    // ID of public key against which randomness is generated
    bytes32 public keyHash;

    // Address of the players
    address[] public players;

    //Max number of players in one game
    uint8 maxPlayers;

    // Variable to indicate if the game has started or not
    bool public gameStarted;

    // the fees for entering the game
    uint256 entryFee;

    // current game id
    uint256 public gameId;

    // emitted when the game starts
    event GameStarted(uint256 gameId, uint256 maxPlayers, uint256 entryFee);

    // emitted when someone joins a game
    event PlayerJoined(uint256 gameId, address player);

    // emitted when the game ends
    event GameEnded(uint256 gameId, address winner, bytes32 requestId);

    /*
     * constructor inherits a VRFConsumerBase and initiates the values for keyHash, fee and gameStarted
     * @param vrfCoordinator address of VRFCoordinator contract
     * @param linkToken address of LINK token contract
     * @param vrfFee the amount of LINK to send with the request
     * @param vrfKeyHash ID of public key against which randomness is generated
     * 
     * All these values are provided to us by Chainlink
     */
    constructor(
        address vrfCoordinator,
        address linkToken,
        uint256 vrfFee,
        bytes32 vrfKeyHash
    ) VRFConsumerBase(vrfCoordinator, linkToken) {
        fee = vrfFee;
        keyHash = vrfKeyHash;
        gameStarted = false;
    }

    /**
    * startGame starts the game by setting appropriate values for all the variables
    */
    function startGame(uint8 _maxPlayers, uint256 _entryFee) public onlyOwner {
        require(!gameStarted, "The game is already started!");

        delete players;
        maxPlayers = _maxPlayers;
        entryFee = _entryFee;
        gameStarted = true;
        gameId += 1;
        emit GameStarted(gameId, maxPlayers, entryFee);
    }

    /**
    joinGame is called when a player wants to enter the game
     */
    function joinGame() public payable {
        require(gameStarted, "The game is not started yet!");
        require(players.length < maxPlayers, "The game is full.");
        require(msg.value == entryFee, "Value sent is not equal to entryFee");
        address player = msg.sender;
        players.push(player);
        
        emit PlayerJoined(gameId, player);

        // If the list is full start the winner selection process
        if(players.length == maxPlayers) {
            getRandomWinner();
        }

    }

    /**
    * getRandomWinner is called to start the process of selecting a random winner
    */
    function getRandomWinner() private returns (bytes32 requestId) {
        // LINK is an internal interface for Link token found within the VRFConsumerBase
        // Here we use the balanceOF method from that interface to make sure that our
        // contract has enough link so that we can request the VRFCoordinator for randomness
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");

        // Make a request to the VRF coordinator.
        // requestRandomness is a function within the VRFConsumerBase
        // it starts the process of randomness generation
        return requestRandomness(keyHash, fee);
    }


    // Function to receive Ether. msg.data must be empty
    receive() external payable {}

    // Fallback function is called when msg.data is not empty
    fallback() external payable {}

    /*
    * fulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof.
    * This function is overrided to act upon the random number generated by Chainlink VRF.
    * @param requestId  this ID is unique for the request we sent to the VRF Coordinator
    * @param randomness this is a random unit256 generated and returned to us by the VRF Coordinator
   */
    function fulfillRandomness(
        bytes32 requestId,
        uint256 randomness
    ) internal virtual override {
        // We want out winnerIndex to be in the length from 0 to players.length-1
        // For this we mod it with the player.length value
        uint256 winnerIndex = randomness % players.length;
        address winner = players[winnerIndex];

        // send the ether in the contract to the winner
        (bool sent, ) = winner.call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");

        emit GameEnded(gameId, winner, requestId);
        gameStarted = false;
    }
}